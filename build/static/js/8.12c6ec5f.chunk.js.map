{"version":3,"sources":["content/GitHub/SCSS/Table.module.scss","content/GitHub/SCSS/Paginator.module.scss","content/GitHub/Table.js","content/GitHub/Paginator.js","content/GitHub/Skeleton.js","content/GitHub/Page.js"],"names":["module","exports","Tabular","rows","headers","DataTable","render","getHeaderProps","getRowProps","getTableProps","selectRow","getExpandHeaderProps","getSelectionProps","TableContainer","title","description","className","Style","styles","Name","Unique","TableHead","TableRow","TableExpandHeader","enableExpando","TableSelectAll","map","header","TableHeader","TableBody","row","Fragment","TableExpandRow","TableSelectRow","TableCell","cells","cell","value","id","TableExpandedRow","colSpan","length","Skeleton","Component","Data","currentPageSize","setCurrentPageSize","setFirstRowIndex","Pagination","totalItems","backwardText","forwardText","pageSize","pageSizes","itemsPerPageText","onChange","page","Table","Rows","Headers","DataTableSkeleton","compact","columnCount","rowCount","showHeader","showToolbar","zebra","key","Linker","organization","url","style","display","Link","href","Page","useState","firstRowIndex","useMemo","repositories","i","String","name","stargazers","issues","createdAt","Date","getDate","updatedAt","homepageUrl","generateData","awaiting","setAwaiting","useEffect","a","Waiter","Promise","_","setTimeout","console","debug","resolve","Await","then","stars","issueCount","toLocaleDateString","links","getRowItems","slice"],"mappings":"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","file":"static/js/8.12c6ec5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"repo-page-github-data-table-container\":\"Table_repo-page-github-data-table-container__19FW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"repo-page-github-paginator\":\"Paginator_repo-page-github-paginator__2bgR2\"};","import React from \"react\";\n\nimport styles from \"./SCSS/Table.module.scss\";\n\nimport { default as Style } from \"./../../utilities/Styles\";\n\nimport {\n    DataTable,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableExpandHeader,\n    TableHeader,\n    TableBody,\n    TableExpandRow,\n    TableCell,\n    TableExpandedRow,\n    TableSelectAll,\n    TableSelectRow\n} from \"@carbon/react\";\n\nconst Tabular = ({ rows, headers }) => {\n    const getRowDescription = () => {\n        return \"[Repository Description Placeholder]\";\n    };\n\n    /// const getRowDescription = rowId => {\n    ///     const row = rows.find(({ id }) => id === rowId);\n    ///     return row ? (row.description) : \"[Repository Description Placeholder]\";\n    /// };\n\n    return (\n        <DataTable\n            rows={ rows }\n            headers={ headers }\n            render={ ({\n                rows,\n                headers,\n                getHeaderProps,\n                getRowProps,\n                selectRow,\n                getTableProps,\n                getExpandHeaderProps,\n                getSelectionProps\n            }) => (\n                <TableContainer title=\"Carbon Repositories\"\n                    description=\"A collection of public Carbon repositories.\"\n                                className={ Style(styles).Name.Unique }\n                >\n                    <Table { ... getTableProps() }>\n                        <TableHead>\n                            <TableRow>\n                                <TableExpandHeader enableExpando={ true } { ... getExpandHeaderProps() } />\n                                <TableSelectAll { ... getSelectionProps() } />\n                                <TableExpandHeader { ... getExpandHeaderProps() } />\n                                { headers.map(header => (\n                                    <TableHeader { ... getHeaderProps({ header }) }>\n                                        { header.header }\n                                    </TableHeader>\n                                )) }\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                rows.map((row) => (\n                                    <React.Fragment key={ row.id }>\n                                        <TableExpandRow { ... getRowProps({ row }) }>\n                                            <TableSelectRow { ... getSelectionProps({ row }) } />\n                                            <TableCell key={ \"expand\" }>{ \"\" }</TableCell>\n                                            { row.cells.map((cell) => (\n                                                <TableCell key={ cell.id }>{ cell.value }</TableCell>\n                                            )) }\n                                        </TableExpandRow>\n                                        <TableExpandedRow colSpan={ headers.length + 3 }>\n                                            <p>{ getRowDescription(row.id) }</p>\n                                        </TableExpandedRow>\n\n                                    </React.Fragment>\n                                ))\n                            }\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            ) }\n        />\n    );\n};\n\nexport default Tabular;\n","import React from \"react\";\n\nimport styles from \"./SCSS/Paginator.module.scss\";\n\nimport {\n    Pagination,\n    PaginationSkeleton\n} from \"@carbon/react\";\n\nimport { default as Style } from \"./../../utilities/Styles\";\n\nconst Name = Style(styles).Name.Unique;\n\nexport const Skeleton = () => {\n    return (\n        <PaginationSkeleton className={ Name }/>\n    );\n};\n\nconst Component = ({Data, currentPageSize, setCurrentPageSize, setFirstRowIndex}) => {\n    return (\n        <Pagination\n            className={ Name }\n            totalItems={ Data.length }\n            backwardText=\"Previous Page\"\n            forwardText=\"Next Page\"\n            pageSize={ currentPageSize }\n            pageSizes={ [5, 10, 15, 25, 50, 100, 1000] }\n            itemsPerPageText=\"Total Page Item(s)\"\n            onChange={ ({ page, pageSize }) => {\n                if (pageSize !== currentPageSize) {\n                    setCurrentPageSize(pageSize);\n                }\n                setFirstRowIndex(pageSize * (page - 1));\n            } }\n        />\n    )\n};\n\nexport default Component;\n","import PropTypes from \"prop-types\";\n\nimport {\n    DataTableSkeleton,\n    TableContainer\n} from \"@carbon/react\";\n\nimport { Skeleton } from \"./Paginator\";\n\nconst Table = ({Rows = 20, Headers = 6}) => (\n    <TableContainer>\n        <DataTableSkeleton\n            compact={false}\n            columnCount={Headers}\n            rowCount={Rows}\n            showHeader={true}\n            showToolbar={false}\n            zebra={false}\n        />\n        <Skeleton/>\n    </TableContainer>\n);\n\nTable.propTypes = {\n    Rows: PropTypes.number,\n    Headers: PropTypes.number\n};\n\nexport default Table;\n","import React, { useState, useMemo, useEffect } from \"react\";\n\nimport { default as Table } from \"./Table\";\n\nimport {\n    Link\n} from \"@carbon/react\";\n\nimport { default as Pagination } from \"./Paginator\";\n\nimport { default as Skeleton } from \"./Skeleton\";\n\nconst headers = [\n    {\n        key: \"name\",\n        header: \"Name\"\n    },\n    {\n        key: \"createdAt\",\n        header: \"Created\"\n    },\n    {\n        key: \"updatedAt\",\n        header: \"Updated\"\n    },\n    {\n        key: \"issueCount\",\n        header: \"Open Issues\"\n    },\n    {\n        key: \"stars\",\n        header: \"Stars\"\n    },\n    {\n        key: \"links\",\n        header: \"Links\"\n    }\n];\n\nconst Linker = ({ organization, url }) => (\n    <ul style={ { display: \"flex\" } }>\n        { organization && (\n            <li>\n                <Link href={ organization }>Home</Link>\n            </li>\n        ) }\n        { url && (\n            <li>\n                <span>&nbsp;|&nbsp;</span>\n                <Link href={ url }>URL</Link>\n            </li>\n        ) }\n    </ul>\n);\n\nconst generateData = () => {\n    const repositories = [];\n\n    for (let i = 0; i < 500; i++) {\n        repositories[i] = {\n            id: String(i),\n            name: \"Test\",\n            stargazers: [\n                null,\n                null,\n                null\n            ],\n            issues: [\n                null\n            ],\n            createdAt: new Date().getDate(),\n            updatedAt: new Date().getDate(),\n            url: \"https://localhost\",\n            homepageUrl: \"https://github.com/cloud-hybrid\"\n        };\n    }\n\n    return repositories;\n}\n\n\n/*****\n *\n * @param rows\n *\n * @returns Array[{*, key, stars, issueCount, createdAt, updatedAt, links}]\n *\n */\nconst getRowItems = (rows) => {\n    return rows.map(\n        (row) => ({\n            ...row,\n            key: row.id,\n            stars: row.stargazers.length,\n            issueCount: row.issues.length,\n            createdAt: new Date(row.createdAt).toLocaleDateString(),\n            updatedAt: new Date(row.updatedAt).toLocaleDateString(),\n            links: <Linker organization={ \"https://github.com/cloud-hybrid\" } url={ \"https://github.com/cloud-hybrid\" } />\n        })\n    );\n};\n\nconst Page = () => {\n    const [firstRowIndex, setFirstRowIndex] = useState(0);\n    const [currentPageSize, setCurrentPageSize] = useState(10);\n\n    const Data = useMemo(() => generateData(), []);\n\n    const [awaiting, setAwaiting] = useState(true);\n\n    useEffect(() => {\n        async function Await() {\n            const Waiter = new Promise((_) => setTimeout(\n                (_) => {\n                    console.debug(\"Updating Await := false\");\n                    setAwaiting(false);\n                },\n                1500\n            ));\n\n            await Waiter;\n\n            Waiter.resolve();\n        }\n\n        Await().then((_) => {\n            /// ... console.log(\"...\");\n        });\n\n        return () => {\n            setAwaiting(null);\n        }\n    }, []);\n\n    if (awaiting === true) return (<Skeleton/>)\n    else {\n        const rows = getRowItems(Data);\n        return (\n            <>\n                <Table\n                    headers={ headers }\n                    rows={ rows.slice(firstRowIndex, firstRowIndex + currentPageSize) }\n                />\n                <Pagination Data={Data} currentPageSize={currentPageSize} setCurrentPageSize={setCurrentPageSize} setFirstRowIndex={setFirstRowIndex}/>\n            </>\n        );\n    }\n}\n\nexport default Page;\n"],"sourceRoot":""}